package ch4_2

import (
	"github.com/golang/protobuf/protoc-gen-go/generator"
	"google.golang.org/protobuf/types/descriptorpb"
)

type ithernetrpcPlugin struct{ *generator.Generator }

func init() {
	generator.RegisterPlugin(new(ithernetrpcPlugin))
}

// Name identifies the plugin.
func (p *ithernetrpcPlugin) Name() string {
	return "ithernetrpc"
}

// Init is called once after data structures are built but before
// code generation begins.
func (p *ithernetrpcPlugin) Init(g *generator.Generator) {
	p.Generator = g
}

// Generate produces the code generated by the plugin for this file,
// except for the imports, by calling the generator's methods P, In, and Out.
func (p *ithernetrpcPlugin) Generate(file *generator.FileDescriptor) {
	for _, svc := range file.Service {
		p.genServiceCode(svc)
	}
}

// GenerateImports produces the import declarations for this file.
// It is called after Generate.
func (p *ithernetrpcPlugin) GenerateImports(file *generator.FileDescriptor) {
	if len(file.Service) > 0 {
		p.genImportCode(file)
	}
}

func (p *ithernetrpcPlugin) genServiceCode(svc *descriptorpb.ServiceDescriptorProto) {
	p.P("// TODO: service code, Name = " + svc.GetName())
}

func (p *ithernetrpcPlugin) genImportCode(file *generator.FileDescriptor) {
	p.P("// TODO: import code")
}
